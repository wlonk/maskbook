require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OrganizationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Organization. As you add validations to Organization, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      user: create(:user),
      name: "The Evil League of Evil",
      description: "Very evil.",
    }
  }

  let(:invalid_attributes) {
    { name: "" }
  }

  describe "GET #index" do
    it "assigns all organizations as @organizations" do
      organization = create(:organization)
      get :index, params: {}
      expect(assigns(:organizations)).to eq([organization])
    end
  end

  describe "GET #show" do
    it "assigns the requested organization as @organization" do
      organization = create(:organization)
      get :show, params: {id: organization.to_param}
      expect(assigns(:organization)).to eq(organization)
    end
  end

  describe "GET #new" do
    it "assigns a new organization as @organization" do
      user = create(:user)
      sign_in user
      get :new, params: {}
      expect(assigns(:organization)).to be_a_new(Organization)
    end
  end

  describe "GET #edit" do
    it "assigns the requested organization as @organization" do
      organization = create(:organization)
      get :edit, params: {id: organization.to_param}
      expect(assigns(:organization)).to eq(organization)
    end
  end

  describe "POST #create" do
    before(:each) do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      user = FactoryGirl.create(:user)
      sign_in user
    end

    context "with valid params" do
      it "creates a new Organization" do
        expect {
          post :create, params: {organization: valid_attributes}
        }.to change(Organization, :count).by(1)
      end

      it "assigns a newly created organization as @organization" do
        post :create, params: {organization: valid_attributes}
        expect(assigns(:organization)).to be_a(Organization)
        expect(assigns(:organization)).to be_persisted
      end

      it "redirects to the created organization" do
        post :create, params: {organization: valid_attributes}
        expect(response).to redirect_to(Organization.last)
      end
    end

    context "with invalid params" do
      it "re-renders the 'new' template" do
        bad_attrs = invalid_attributes.merge({user: @user})
        post :create, params: {organization: bad_attrs}
        expect(response).to render_template('new')
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    context "with valid params" do
      let(:new_attributes) {
        { 
          name: "Vengeful Five",
        }
      }

      it "updates the requested organization" do
        organization = create(:organization, user: @user)
        put :update, params: {id: organization.to_param, organization: new_attributes}
        organization.reload
        expect(organization.name).to eq("Vengeful Five")
      end

      it "assigns the requested organization as @organization" do
        organization = create(:organization, user: @user)
        put :update, params: {id: organization.to_param, organization: valid_attributes}
        expect(assigns(:organization)).to eq(organization)
      end

      it "redirects to the organization" do
        organization = create(:organization, user: @user)
        put :update, params: {id: organization.to_param, organization: valid_attributes}
        expect(response).to redirect_to(organization)
      end
    end

    context "with invalid params" do
      it "assigns the organization as @organization" do
        organization = create(:organization, user: @user)
        put :update, params: {id: organization.to_param, organization: invalid_attributes}
        expect(assigns(:organization)).to eq(organization)
      end

      it "re-renders the 'edit' template" do
        organization = create(:organization, user: @user)
        put :update, params: {id: organization.to_param, organization: invalid_attributes}
        expect(response).to render_template('edit')
      end
    end

    context "affiliations" do
      before(:each) do
        @user2 = create(:user)
        @villain1 = create(:villain, name: "Mine", user: @user)
        @villain2 = create(:villain, name: "Yours", user: @user2)
        @villain3 = create(:villain, name: "Ours", user: @user2, collaborators: [@user])

        @organization1 = create(:organization, name: "Mine", user: @user)
        @organization2 = create(:organization, name: "Yours", user: @user2)
      end

      it "lets you add affiliations if you own both ends" do
        put :update, params: {
          id: @organization1.to_param,
          organization: {
            villain_ids: [@villain1.id]
          }
        }
        @organization1.reload
        expect(@organization1.villains).to eq([@villain1])
      end

      it "lets you add affiliations if you collaborate or edit both ends" do
        put :update, params: {
          id: @organization1.to_param,
          organization: {
            villain_ids: [@villain3.id]
          }
        }
        @organization1.reload
        expect(@organization1.villains).to eq([@villain3])
      end

      it "does not let you add affiliations if either side is not editable" do
        put :update, params: {
          id: @organization1.to_param,
          organization: {
            villain_ids: [@villain2.id]
          }
        }
        @organization1.reload
        expect(@organization1.villains).to eq([])
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      user = FactoryGirl.create(:user)
      sign_in user
    end

    it "destroys the requested organization" do
      organization = create(:organization)
      expect {
        delete :destroy, params: {id: organization.to_param}
      }.to change(Organization, :count).by(-1)
    end

    it "redirects to the organizations list" do
      organization = create(:organization)
      delete :destroy, params: {id: organization.to_param}
      expect(response).to redirect_to(organizations_url)
    end
  end
end
